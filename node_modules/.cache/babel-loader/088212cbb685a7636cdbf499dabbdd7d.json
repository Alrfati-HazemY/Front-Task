{"ast":null,"code":"var _jsxFileName = \"/home/hazem/Documents/Front-Task/src/views/Posts/PostDetails.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PostCard from './PostCard';\nimport { PostComment } from './PostComment';\nimport Container from \"@material-ui/core/Container\";\nimport Box from \"@material-ui/core/Box\";\nimport { makeStyles } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  post_list_container\n}));\nexport const PostDetails = props => {\n  _s();\n\n  let {\n    id\n  } = useParams();\n  const [post, setPost] = useState({});\n  const [comments, setComments] = useState([]);\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/posts\").then(response => {\n      return response.json();\n    }).then(data => {\n      let post2 = data.filter((ele, index) => {\n        return ele.id === +id;\n      })[0];\n      setPost(post2);\n    });\n    fetch(\"https://jsonplaceholder.typicode.com/comments\").then(response => {\n      return response.json();\n    }).then(data => {\n      let comments = data.filter((ele, index) => {\n        return ele.postId === +id;\n      });\n      setComments(comments);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: classes.post_list_container,\n    children: /*#__PURE__*/_jsxDEV(PostCard, {\n      post: post,\n      children: comments.map((comment, index) => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(PostComment, {\n            comment: comment\n          }, comment.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true);\n      })\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostDetails, \"FhRXHMLB7mC22Lx2Ps8PJH8/Y7s=\", false, function () {\n  return [useParams];\n});\n\n_c = PostDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostDetails\");","map":{"version":3,"sources":["/home/hazem/Documents/Front-Task/src/views/Posts/PostDetails.js"],"names":["React","useEffect","useState","useParams","PostCard","PostComment","Container","Box","makeStyles","useStyles","theme","post_list_container","PostDetails","props","id","post","setPost","comments","setComments","fetch","then","response","json","data","post2","filter","ele","index","postId","classes","map","comment"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,SAASC,UAAT,QAA2B,mBAA3B;;;AAEA,MAAMC,SAAS,GAAGD,UAAU,CAAEE,KAAD,KAAU;AACnCC,EAAAA;AADmC,CAAV,CAAD,CAA5B;AAIA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAElC,MAAI;AAAEC,IAAAA;AAAF,MAASX,SAAS,EAAtB;AAEA,QAAM,CAACY,IAAD,EAAQC,OAAR,IAAmBd,QAAQ,CAAC,EAAD,CAAjC;AAEA,QAAM,CAACe,QAAD,EAAYC,WAAZ,IAA2BhB,QAAQ,CAAC,EAAD,CAAzC;AAGAD,EAAAA,SAAS,CACL,MAAM;AACFkB,IAAAA,KAAK,CAAC,4CAAD,CAAL,CACCC,IADD,CACQC,QAAD,IAAc;AACjB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KAHH,EAIGF,IAJH,CAISG,IAAD,IAAQ;AACb,UAAIC,KAAK,GAAGD,IAAI,CAACE,MAAL,CAAY,CAACC,GAAD,EAAKC,KAAL,KAAe;AAChC,eAAOD,GAAG,CAACZ,EAAJ,KAAW,CAACA,EAAnB;AACH,OAFQ,EAEN,CAFM,CAAZ;AAGGE,MAAAA,OAAO,CAACQ,KAAD,CAAP;AACL,KATD;AAUAL,IAAAA,KAAK,CAAC,+CAAD,CAAL,CACCC,IADD,CACQC,QAAD,IAAc;AACjB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KAHH,EAIGF,IAJH,CAISG,IAAD,IAAQ;AACV,UAAIN,QAAQ,GAAGM,IAAI,CAACE,MAAL,CAAY,CAACC,GAAD,EAAKC,KAAL,KAAe;AACtC,eAAOD,GAAG,CAACE,MAAJ,KAAe,CAACd,EAAvB;AACH,OAFc,CAAf;AAGAI,MAAAA,WAAW,CAACD,QAAD,CAAX;AACL,KATD;AAUH,GAtBI,EAuBP,EAvBO,CAAT;AA4BF,sBACE,QAAC,SAAD;AAAW,IAAA,SAAS,EAAEY,OAAO,CAAClB,mBAA9B;AAAA,2BACI,QAAC,QAAD;AAAwB,MAAA,IAAI,EAAEI,IAA9B;AAAA,gBACCE,QAAQ,CAACa,GAAT,CAAa,CAACC,OAAD,EAASJ,KAAT,KAAmB;AAC7B,4BACI;AAAA,kCACA,QAAC,WAAD;AAA8B,YAAA,OAAO,EAAEI;AAAvC,aAAkBA,OAAO,CAACjB,EAA1B;AAAA;AAAA;AAAA;AAAA,kBADA,eAEA;AAAA;AAAA;AAAA;AAAA,kBAFA;AAAA,wBADJ;AAMH,OAPA;AADD,OAAeC,IAAI,CAACD,EAApB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CApDM;;GAAMF,W;UAEIT,S;;;KAFJS,W","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom';\nimport PostCard from './PostCard';\nimport { PostComment } from './PostComment';\nimport Container from \"@material-ui/core/Container\";\nimport Box from \"@material-ui/core/Box\";\nimport { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme)=>({\n    post_list_container \n})) \n\nexport const PostDetails = (props) => {\n\n    let { id } = useParams(); \n\n    const [post , setPost] = useState({})\n\n    const [comments , setComments] = useState([]);\n\n\n    useEffect(\n        () => {\n            fetch(\"https://jsonplaceholder.typicode.com/posts\")\n            .then( (response) => {\n                return response.json()\n              })\n              .then((data)=>{\n               let post2 = data.filter((ele,index) => {\n                      return ele.id === +id\n                  })[0]\n                  setPost(post2);\n            })\n            fetch(\"https://jsonplaceholder.typicode.com/comments\")\n            .then( (response) => {\n                return response.json()\n              })\n              .then((data)=>{\n                  let comments = data.filter((ele,index) => {\n                      return ele.postId === +id\n                  })\n                  setComments(comments);\n            })\n        }\n    , [])\n\n    \n\n\n  return (\n    <Container className={classes.post_list_container}>\n        <PostCard key={post.id} post={post}>\n        {comments.map((comment,index) => {\n            return(\n                <>\n                <PostComment key={comment.id} comment={comment} />\n                <hr />\n                </>\n            )\n        })}\n        </PostCard>\n    </Container>\n\n  )\n}\n"]},"metadata":{},"sourceType":"module"}