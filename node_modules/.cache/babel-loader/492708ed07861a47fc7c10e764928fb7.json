{"ast":null,"code":"var _jsxFileName = \"/home/hazem/Documents/Front-Task/src/views/Posts/PostsList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport PostCard from './PostCard';\nimport Container from \"@material-ui/core/Container\";\nimport { makeStyles } from '@material-ui/core';\nimport { LoginCtx } from '../../context/LoginContex';\nimport { fetchPosts } from './services/PostService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  post_list_container: {\n    backgroundColor: \"#626477\",\n    padding: \"60px 100px 30px 100px\",\n    minHeight: \"calc(100vh - 65px)\",\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-between\"\n  },\n  [theme.breakpoints.down(\"md\")]: {\n    post_list_container: {\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      padding: \"20px 10px 10px 10px\"\n    }\n  }\n}));\nexport const PostsList = props => {\n  _s();\n\n  const {\n    userLoggedIn\n  } = useContext(LoginCtx);\n  const classes = useStyles();\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    // fetch('https://jsonplaceholder.typicode.com/posts')\n    // .then( (response) => {\n    //   return response.json()\n    // })\n    // .then((data)=>{\n    //   let allPosts = data;\n    //   let user     = userLoggedIn\n    //   let userPosts = allPosts.filter((post,index) => {\n    //     return post.userId === user.id\n    //   })\n    //   setPosts(userPosts)\n    // })\n    const fetchMyposts = async () => {\n      let allPosts = await fetchPosts();\n      let user = userLoggedIn;\n      let userPosts = allPosts.filter((post, index) => {\n        return post.userId === user.id;\n      });\n      setPosts(userPosts);\n    };\n\n    fetchMyposts();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"xl\",\n    className: classes.post_list_container,\n    children: posts.map((post, index) => {\n      return /*#__PURE__*/_jsxDEV(PostCard, {\n        post: post\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostsList, \"9M/OP7s0JN/XXGVDeq7XH61GJuU=\", false, function () {\n  return [useStyles];\n});\n\n_c = PostsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostsList\");","map":{"version":3,"sources":["/home/hazem/Documents/Front-Task/src/views/Posts/PostsList.js"],"names":["React","useContext","useEffect","useState","PostCard","Container","makeStyles","LoginCtx","fetchPosts","useStyles","theme","post_list_container","backgroundColor","padding","minHeight","display","flexWrap","justifyContent","breakpoints","down","flexDirection","alignItems","PostsList","props","userLoggedIn","classes","posts","setPosts","fetchMyposts","allPosts","user","userPosts","filter","post","index","userId","id","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,QAAT,QAAyB,2BAAzB;AACA,SAAQC,UAAR,QAAyB,wBAAzB;;AAEA,MAAMC,SAAS,GAAGH,UAAU,CAAEI,KAAD,KAAU;AACrCC,EAAAA,mBAAmB,EAAG;AACpBC,IAAAA,eAAe,EAAE,SADG;AAEpBC,IAAAA,OAAO,EAAE,uBAFW;AAGpBC,IAAAA,SAAS,EAAE,oBAHS;AAIpBC,IAAAA,OAAO,EAAG,MAJU;AAKpBC,IAAAA,QAAQ,EAAG,MALS;AAMpBC,IAAAA,cAAc,EAAC;AANK,GADe;AASrC,GAACP,KAAK,CAACQ,WAAN,CAAkBC,IAAlB,CAAuB,IAAvB,CAAD,GAAiC;AAC/BR,IAAAA,mBAAmB,EAAG;AACpBS,MAAAA,aAAa,EAAG,QADI;AAEpBC,MAAAA,UAAU,EAAG,QAFO;AAGpBR,MAAAA,OAAO,EAAG;AAHU;AADS;AATI,CAAV,CAAD,CAA5B;AAmBA,OAAO,MAAMS,SAAS,GAAIC,KAAD,IAAW;AAAA;;AAElC,QAAM;AAACC,IAAAA;AAAD,MAAkBvB,UAAU,CAACM,QAAD,CAAlC;AAEA,QAAMkB,OAAO,GAAGhB,SAAS,EAAzB;AAEA,QAAM,CAACiB,KAAD,EAASC,QAAT,IAAqBxB,QAAQ,CAAC,EAAD,CAAnC;AAEAD,EAAAA,SAAS,CACP,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAM0B,YAAY,GAAG,YAAY;AAC/B,UAAIC,QAAQ,GAAI,MAAMrB,UAAU,EAAhC;AACA,UAAIsB,IAAI,GAAQN,YAAhB;AACA,UAAIO,SAAS,GAAGF,QAAQ,CAACG,MAAT,CAAgB,CAACC,IAAD,EAAMC,KAAN,KAAgB;AAC1C,eAAOD,IAAI,CAACE,MAAL,KAAgBL,IAAI,CAACM,EAA5B;AACD,OAFW,CAAhB;AAGAT,MAAAA,QAAQ,CAACI,SAAD,CAAR;AACD,KAPD;;AAQAH,IAAAA,YAAY;AACb,GAvBQ,EAwBR,EAxBQ,CAAT;AA0BA,sBACE,QAAC,SAAD;AAAW,IAAA,QAAQ,EAAC,IAApB;AAAyB,IAAA,SAAS,EAAEH,OAAO,CAACd,mBAA5C;AAAA,cACGe,KAAK,CAACW,GAAN,CAAU,CAACJ,IAAD,EAAMC,KAAN,KAAc;AACvB,0BACE,QAAC,QAAD;AAAwB,QAAA,IAAI,EAAED;AAA9B,SAAiBC,KAAjB;AAAA;AAAA;AAAA;AAAA,cADF;AAGD,KAJA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CA3CM;;GAAMZ,S;UAIKb,S;;;KAJLa,S","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport PostCard from './PostCard';\nimport Container from \"@material-ui/core/Container\";\nimport { makeStyles } from '@material-ui/core';\nimport { LoginCtx } from '../../context/LoginContex';\nimport {fetchPosts} from './services/PostService'\n\nconst useStyles = makeStyles((theme)=>({\n  post_list_container : {\n    backgroundColor: \"#626477\",\n    padding: \"60px 100px 30px 100px\",\n    minHeight: \"calc(100vh - 65px)\",\n    display : \"flex\",\n    flexWrap : \"wrap\",\n    justifyContent:\"space-between\",\n  },\n  [theme.breakpoints.down(\"md\")] : {\n    post_list_container : {\n      flexDirection : \"column\",\n      alignItems : \"center\",\n      padding : \"20px 10px 10px 10px\"\n    }\n  }\n}))\n\n\nexport const PostsList = (props) => {\n\n  const {userLoggedIn } = useContext(LoginCtx);\n\n  const classes = useStyles();\n  \n  const [posts , setPosts] = useState([]);\n\n  useEffect(\n    () => {\n    // fetch('https://jsonplaceholder.typicode.com/posts')\n    // .then( (response) => {\n    //   return response.json()\n    // })\n    // .then((data)=>{\n    //   let allPosts = data;\n    //   let user     = userLoggedIn\n    //   let userPosts = allPosts.filter((post,index) => {\n    //     return post.userId === user.id\n    //   })\n    //   setPosts(userPosts)\n    // })\n    const fetchMyposts = async () => {\n      let allPosts  = await fetchPosts();\n      let user      = userLoggedIn;\n      let userPosts = allPosts.filter((post,index) => {\n            return post.userId === user.id\n          })\n      setPosts(userPosts);\n    }\n    fetchMyposts();\n  }\n  ,[])\n\n  return (\n    <Container maxWidth=\"xl\" className={classes.post_list_container}>\n      {posts.map((post,index)=>{\n        return (\n          <PostCard key = {index} post={post} />\n        )\n      })}\n    </Container>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}