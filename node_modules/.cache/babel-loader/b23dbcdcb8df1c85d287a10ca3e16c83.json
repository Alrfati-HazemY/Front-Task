{"ast":null,"code":"var _jsxFileName = \"/home/hazem/Documents/Front-Task/src/components/Posts/PostsList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PostCard from './PostCard';\nimport Container from \"@material-ui/core/Container\";\nimport { makeStyles } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  post_list_container: {\n    backgroundColor: \"#626477\",\n    paddingTop: \"60px\",\n    paddingBottom: \"30px\",\n    minHeight: \"calc(100vh - 65px)\"\n  }\n}));\nexport const PostsList = props => {\n  _s();\n\n  const classes = useStyles();\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/posts').then(response => {\n      return response.json();\n    }).then(data => {\n      let allPosts = data;\n      let user = props.userLoggedIn;\n      let userPosts = allPosts.filter((post, index) => {\n        return post.userId === user.id;\n      });\n      setPosts(userPosts);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    className: classes.post_list_container,\n    children: posts.map((post, index) => {\n      return /*#__PURE__*/_jsxDEV(PostCard, {\n        post: post\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostsList, \"vEX5sCyFk6O5chIO0g0r5jWO81g=\", false, function () {\n  return [useStyles];\n});\n\n_c = PostsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostsList\");","map":{"version":3,"sources":["/home/hazem/Documents/Front-Task/src/components/Posts/PostsList.js"],"names":["React","useEffect","useState","PostCard","Container","makeStyles","useStyles","theme","post_list_container","backgroundColor","paddingTop","paddingBottom","minHeight","PostsList","props","classes","posts","setPosts","fetch","then","response","json","data","allPosts","user","userLoggedIn","userPosts","filter","post","index","userId","id","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,SAASC,UAAT,QAA2B,mBAA3B;;AAEA,MAAMC,SAAS,GAAGD,UAAU,CAAEE,KAAD,KAAU;AACrCC,EAAAA,mBAAmB,EAAG;AACpBC,IAAAA,eAAe,EAAE,SADG;AAEpBC,IAAAA,UAAU,EAAE,MAFQ;AAGpBC,IAAAA,aAAa,EAAE,MAHK;AAIpBC,IAAAA,SAAS,EAAE;AAJS;AADe,CAAV,CAAD,CAA5B;AAUA,OAAO,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AAElC,QAAMC,OAAO,GAAGT,SAAS,EAAzB;AACA,QAAM,CAACU,KAAD,EAASC,QAAT,IAAqBf,QAAQ,CAAC,EAAD,CAAnC;AAEAD,EAAAA,SAAS,CACP,MAAM;AACNiB,IAAAA,KAAK,CAAC,4CAAD,CAAL,CACCC,IADD,CACQC,QAAD,IAAc;AACnB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KAHD,EAICF,IAJD,CAIOG,IAAD,IAAQ;AACZ,UAAIC,QAAQ,GAAGD,IAAf;AACA,UAAIE,IAAI,GAAOV,KAAK,CAACW,YAArB;AACA,UAAIC,SAAS,GAAGH,QAAQ,CAACI,MAAT,CAAgB,CAACC,IAAD,EAAMC,KAAN,KAAgB;AAC9C,eAAOD,IAAI,CAACE,MAAL,KAAgBN,IAAI,CAACO,EAA5B;AACD,OAFe,CAAhB;AAGAd,MAAAA,QAAQ,CAACS,SAAD,CAAR;AACD,KAXD;AAYD,GAdQ,EAeR,EAfQ,CAAT;AAiBA,sBACE,QAAC,SAAD;AAAW,IAAA,KAAK,MAAhB;AAAiB,IAAA,SAAS,EAAEX,OAAO,CAACP,mBAApC;AAAA,cACGQ,KAAK,CAACgB,GAAN,CAAU,CAACJ,IAAD,EAAMC,KAAN,KAAc;AACvB,0BACE,QAAC,QAAD;AAAwB,QAAA,IAAI,EAAED;AAA9B,SAAiBC,KAAjB;AAAA;AAAA;AAAA;AAAA,cADF;AAGD,KAJA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CA/BM;;GAAMhB,S;UAEKP,S;;;KAFLO,S","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport PostCard from './PostCard';\nimport Container from \"@material-ui/core/Container\";\nimport { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme)=>({\n  post_list_container : {\n    backgroundColor: \"#626477\",\n    paddingTop: \"60px\",\n    paddingBottom: \"30px\",\n    minHeight: \"calc(100vh - 65px)\",\n  }\n}))\n\n\nexport const PostsList = (props) => {\n\n  const classes = useStyles();\n  const [posts , setPosts] = useState([]);\n\n  useEffect(\n    () => {\n    fetch('https://jsonplaceholder.typicode.com/posts')\n    .then( (response) => {\n      return response.json()\n    })\n    .then((data)=>{\n      let allPosts = data;\n      let user     = props.userLoggedIn\n      let userPosts = allPosts.filter((post,index) => {\n        return post.userId === user.id\n      })\n      setPosts(userPosts)\n    })\n  }\n  ,[])\n\n  return (\n    <Container fluid className={classes.post_list_container}>\n      {posts.map((post,index)=>{\n        return (\n          <PostCard key = {index} post={post} />\n        )\n      })}\n    </Container>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}