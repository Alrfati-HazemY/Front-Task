{"ast":null,"code":"var _jsxFileName = \"/home/hazem/Documents/Front-Task/src/views/Loign/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport { useNavigate } from \"react-router-dom\";\nimport { LoginCtx } from \"../../context/LoginContex\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  container: {\n    backgroundImage: 'url(\"/images/login.jpg\")',\n    height: \"calc(100vh - 65px)\",\n    backgroundSize: \"cover\",\n    position: \"relative\"\n  },\n  form: {\n    backgroundColor: \"#2b2d42\",\n    boxShadow: \"0 10px 20px rgba(0, 0, 0, 0.19), 0 3px 6px rgba(0, 0, 0, 0.23)\",\n    width: \"40%\",\n    padding: \"20px\",\n    position: \"absolute\",\n    left: \"50%\",\n    top: \"40%\",\n    transform: \"translate(-50%, -40%)\",\n    borderRadius: \"5px\",\n    [theme.breakpoints.down('md')]: {\n      width: \"60%\"\n    },\n    [theme.breakpoints.down('sm')]: {\n      width: \"85%\"\n    }\n  },\n  title: {\n    fontFamily: \"Arial, Helvetica, sans-serif\",\n    fontSize: \"32px\",\n    marginBottom: \"15px\",\n    color: \"white\"\n  },\n  loginForm: {\n    marginBottom: \"20px\",\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    position: \"relative\"\n  },\n  login_form_input: {\n    width: \"90%\",\n    margin: \"auto\",\n    color: \"white\"\n  },\n  error: {\n    color: \"#ff6a6a\",\n    fontWeight: \"300\",\n    width: \"100%\",\n    paddingTop: \"5px\",\n    paddingLeft: \"1.55em\",\n    textAlign: \"center\",\n    marginTop: \"20px\",\n    fontSize: \"16px\",\n    opacity: \"0\"\n  },\n  loginError: {\n    textAlign: \"center\",\n    marginTop: \"16px\",\n    fontSize: \"16px !important\",\n    opacity: 0\n  },\n  login_btn: {\n    display: \"block\",\n    margin: \"auto\",\n    padding: \"10px 25px\",\n    fontSize: \"16px\"\n  },\n  login_error_opacity: {\n    opacity: \"1\"\n  },\n  multilineColor: {\n    color: \"white\"\n  }\n}));\nexport const Login = props => {\n  _s();\n\n  const {\n    setUserLoggedIn,\n    setLoggedIn\n  } = useContext(LoginCtx);\n  const classes = useStyles();\n  const navigate = useNavigate();\n  const [users, setUsers] = useState([]);\n  const [{\n    email,\n    password\n  }, setLoginForm] = useState({\n    email: \"\",\n    password: \"\"\n  });\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    setUsers(() => {\n      return JSON.parse(localStorage.getItem(\"users\"));\n    });\n  }, []);\n\n  const loginValuesHandler = event => {\n    setLoginForm(preState => {\n      return { ...preState,\n        [event.target.name]: event.target.value\n      };\n    });\n  };\n\n  const loginFormHandler = event => {\n    event.preventDefault();\n\n    if (email.trim().length === 0 || password.trim().length === 0) {\n      setError(\"Please fill in all inputs\");\n    } else if (users) {\n      let user = users.filter(ele => {\n        return ele.email === email;\n      })[0];\n\n      if (user) {\n        if (user.password === password) {\n          setLoggedIn(true);\n          localStorage.setItem(\"userLoggedIn\", JSON.stringify(user));\n          setUserLoggedIn(user);\n          navigate(\"/\");\n        } else {\n          setError(\"Password is not correct\");\n        }\n      } else {\n        setError(\"Email is not exist\");\n      }\n    } else {\n      setError(\"Email is not exist\");\n    }\n  }; ///////  React Component  ///////\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"xl\",\n    className: classes.container,\n    children: /*#__PURE__*/_jsxDEV(FormControl, {\n      className: classes.form,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        align: \"center\",\n        className: classes.title,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        className: classes.loginForm,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          autoComplete: \"off\",\n          \"data-testid\": \"email\",\n          onChange: loginValuesHandler,\n          value: email,\n          name: \"email\",\n          className: classes.login_form_input,\n          label: \"Email\",\n          InputLabelProps: {\n            style: {\n              color: \"#ddd\"\n            }\n          },\n          InputProps: {\n            className: classes.multilineColor\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        className: classes.loginForm,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          autoComplete: \"off\",\n          \"data-testid\": \"password\",\n          onChange: loginValuesHandler,\n          value: password,\n          name: \"password\",\n          type: \"password\",\n          className: classes.login_form_input,\n          label: \"Password\",\n          InputLabelProps: {\n            style: {\n              color: \"#ddd\"\n            }\n          },\n          style: {\n            color: \"white !important\"\n          },\n          InputProps: {\n            className: classes.multilineColor\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          className: ` ${error ? classes.login_error_opacity : \"\"} ${classes.error} `,\n          children: error ? error : \"Please fill in all inputs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: loginFormHandler,\n        className: classes.login_btn,\n        variant: \"contained\",\n        color: \"primary\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"G1lCt8raS2p6m6zYAVSz+Ij7RKI=\", false, function () {\n  return [useStyles, useNavigate];\n});\n\n_c = Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/home/hazem/Documents/Front-Task/src/views/Loign/Login.js"],"names":["React","useContext","useEffect","useState","TextField","Button","makeStyles","Container","Box","Typography","FormControl","useNavigate","LoginCtx","useStyles","theme","container","backgroundImage","height","backgroundSize","position","form","backgroundColor","boxShadow","width","padding","left","top","transform","borderRadius","breakpoints","down","title","fontFamily","fontSize","marginBottom","color","loginForm","display","justifyContent","flexWrap","login_form_input","margin","error","fontWeight","paddingTop","paddingLeft","textAlign","marginTop","opacity","loginError","login_btn","login_error_opacity","multilineColor","Login","props","setUserLoggedIn","setLoggedIn","classes","navigate","users","setUsers","email","password","setLoginForm","setError","JSON","parse","localStorage","getItem","loginValuesHandler","event","preState","target","name","value","loginFormHandler","preventDefault","trim","length","user","filter","ele","setItem","stringify","style","className"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport { useNavigate } from \"react-router-dom\";\nimport { LoginCtx } from \"../../context/LoginContex\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    backgroundImage: 'url(\"/images/login.jpg\")',\n    height: \"calc(100vh - 65px)\",\n    backgroundSize: \"cover\",\n    position: \"relative\",\n  },\n  form: {\n    backgroundColor: \"#2b2d42\",\n    boxShadow: \"0 10px 20px rgba(0, 0, 0, 0.19), 0 3px 6px rgba(0, 0, 0, 0.23)\",\n    width: \"40%\",\n    padding: \"20px\",\n    position: \"absolute\",\n    left: \"50%\",\n    top: \"40%\",\n    transform: \"translate(-50%, -40%)\",\n    borderRadius: \"5px\",\n    [theme.breakpoints.down('md')] : {\n      width : \"60%\"\n    },\n      [theme.breakpoints.down('sm')] : {\n      width: \"85%\"\n    }\n  },\n  title: {\n    fontFamily: \"Arial, Helvetica, sans-serif\",\n    fontSize: \"32px\",\n    marginBottom: \"15px\",\n    color: \"white\",\n  },\n  loginForm: {\n    marginBottom: \"20px\",\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    position: \"relative\",\n  },\n  login_form_input: {\n    width: \"90%\",\n    margin: \"auto\",\n    color: \"white\",\n  },\n  error: {\n    color: \"#ff6a6a\",\n    fontWeight: \"300\",\n    width: \"100%\",\n    paddingTop: \"5px\",\n    paddingLeft: \"1.55em\",\n    textAlign: \"center\",\n    marginTop: \"20px\",\n    fontSize: \"16px\",\n    opacity: \"0\",\n  },\n  loginError: {\n    textAlign: \"center\",\n    marginTop: \"16px\",\n    fontSize: \"16px !important\",\n    opacity: 0,\n  },\n  login_btn: {\n    display: \"block\",\n    margin: \"auto\",\n    padding: \"10px 25px\",\n    fontSize: \"16px\",\n  },\n\n  login_error_opacity: {\n    opacity: \"1\",\n  },\n  multilineColor: {\n    color: \"white\",\n  },\n}));\n\nexport const Login = (props) => {\n\n  const {setUserLoggedIn , setLoggedIn } = useContext(LoginCtx);\n  const classes = useStyles();\n  const navigate = useNavigate();\n  const [users, setUsers] = useState([]);\n  const [{ email, password }, setLoginForm] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    setUsers(() => {\n      return JSON.parse(localStorage.getItem(\"users\"));\n    });\n  }, []);\n\n  const loginValuesHandler = (event) => {\n    setLoginForm((preState) => {\n      return { ...preState, [event.target.name]: event.target.value };\n    });\n  };\n\n  const loginFormHandler = (event) => {\n    event.preventDefault();\n    if (email.trim().length === 0 || password.trim().length === 0) {\n      setError(\"Please fill in all inputs\");\n    } else if (users) {\n      let user = users.filter((ele) => {\n        return ele.email === email;\n      })[0];\n      if (user) {\n        if (user.password === password) {\n          setLoggedIn(true);\n          localStorage.setItem(\"userLoggedIn\", JSON.stringify(user));\n          setUserLoggedIn(user);\n          navigate(\"/\");\n        } else {\n          setError(\"Password is not correct\");\n        }\n      } else {\n        setError(\"Email is not exist\");\n      }\n    } else {\n      setError(\"Email is not exist\");\n    }\n  };\n\n  ///////  React Component  ///////\n\n  return (\n    <Container maxWidth=\"xl\" className={classes.container}>\n      <FormControl className={classes.form}>\n        <Typography align=\"center\" className={classes.title}>Login</Typography>\n        <Box className={classes.loginForm}>\n          <TextField\n            autoComplete=\"off\"\n            data-testid=\"email\"\n            onChange={loginValuesHandler}\n            value={email}\n            name=\"email\"\n            className={classes.login_form_input}\n            label=\"Email\"\n            InputLabelProps={{ style: { color: \"#ddd\" } }}\n            InputProps={{\n              className: classes.multilineColor,\n            }}\n          />\n        </Box>\n        <Box className={classes.loginForm}>\n          <TextField\n            autoComplete=\"off\"\n            data-testid=\"password\"\n            onChange={loginValuesHandler}\n            value={password}\n            name=\"password\"\n            type=\"password\"\n            className={classes.login_form_input}\n            label=\"Password\"\n            InputLabelProps={{ style: { color: \"#ddd\" } }}\n            style={{ color: \"white !important\" }}\n            InputProps={{\n              className: classes.multilineColor,\n            }}\n          />\n          <Box\n            className={` ${error ? classes.login_error_opacity : \"\"} ${classes.error} `}\n          >\n            {error ? error : \"Please fill in all inputs\"}\n          </Box>\n        </Box>\n        <Button\n          onClick={loginFormHandler}\n          className={classes.login_btn}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Login\n        </Button>\n      </FormControl>\n    </Container>\n  );\n};"]},"metadata":{},"sourceType":"module"}