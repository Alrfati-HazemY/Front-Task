{"ast":null,"code":"var _jsxFileName = \"/home/hazem/Documents/Front-Task/src/views/Posts/PostDetails.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PostCard from './PostCard';\nimport { PostComment } from './PostComment';\nimport Container from \"@material-ui/core/Container\";\nimport { makeStyles } from '@material-ui/core';\nimport { fetchAllPosts } from './services/PostService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  post_list_container: {\n    backgroundColor: \"#626477\",\n    paddingTop: \"60px\",\n    paddingBottom: \"30px\",\n    minHeight: \"calc(100vh - 65px)\",\n    display: \"flex\",\n    justifyContent: \"center\"\n  },\n  [theme.breakpoints.down(\"md\")]: {\n    post_list_container: {\n      padding: \"20px 10px 10px 10px\"\n    }\n  }\n}));\nexport const PostDetails = props => {\n  _s();\n\n  const classes = useStyles();\n  let {\n    id\n  } = useParams();\n  const [post, setPost] = useState({});\n  const [comments, setComments] = useState([]);\n  useEffect(() => {\n    const fetchPostComments = async () => {\n      let allPosts = await fetchAllPosts();\n      let user = userLoggedIn;\n      let userPosts = allPosts.filter((post, index) => {\n        return post.userId === user.id;\n      });\n      setPosts(userPosts);\n    };\n\n    fetchMyposts(); // fetch(\"https://jsonplaceholder.typicode.com/posts\")\n    // .then( (response) => {\n    //     return response.json()\n    //   })\n    //   .then((data)=>{\n    //    let post2 = data.filter((ele,index) => {\n    //           return ele.id === +id\n    //       })[0]\n    //       setPost(post2);\n    // })\n\n    fetch(\"https://jsonplaceholder.typicode.com/comments\").then(response => {\n      return response.json();\n    }).then(data => {\n      let comments = data.filter((ele, index) => {\n        return ele.postId === +id;\n      });\n      setComments(comments);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"xl\",\n    className: classes.post_list_container,\n    children: /*#__PURE__*/_jsxDEV(PostCard, {\n      post: post,\n      children: comments.map((comment, index) => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(PostComment, {\n            comment: comment\n          }, comment.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true);\n      })\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostDetails, \"KYD+1KfvAdLTgBwO7s8xBfxtbOo=\", false, function () {\n  return [useStyles, useParams];\n});\n\n_c = PostDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostDetails\");","map":{"version":3,"sources":["/home/hazem/Documents/Front-Task/src/views/Posts/PostDetails.js"],"names":["React","useEffect","useState","useParams","PostCard","PostComment","Container","makeStyles","fetchAllPosts","useStyles","theme","post_list_container","backgroundColor","paddingTop","paddingBottom","minHeight","display","justifyContent","breakpoints","down","padding","PostDetails","props","classes","id","post","setPost","comments","setComments","fetchPostComments","allPosts","user","userLoggedIn","userPosts","filter","index","userId","setPosts","fetchMyposts","fetch","then","response","json","data","ele","postId","map","comment"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAAQC,aAAR,QAA4B,wBAA5B;;;AAGA,MAAMC,SAAS,GAAGF,UAAU,CAAEG,KAAD,KAAU;AACnCC,EAAAA,mBAAmB,EAAG;AAClBC,IAAAA,eAAe,EAAE,SADC;AAElBC,IAAAA,UAAU,EAAE,MAFM;AAGlBC,IAAAA,aAAa,EAAE,MAHG;AAIlBC,IAAAA,SAAS,EAAE,oBAJO;AAKlBC,IAAAA,OAAO,EAAG,MALQ;AAMlBC,IAAAA,cAAc,EAAG;AANC,GADa;AASjC,GAACP,KAAK,CAACQ,WAAN,CAAkBC,IAAlB,CAAuB,IAAvB,CAAD,GAAiC;AAC/BR,IAAAA,mBAAmB,EAAG;AACpBS,MAAAA,OAAO,EAAG;AADU;AADS;AATA,CAAV,CAAD,CAA5B;AAgBA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAElC,QAAMC,OAAO,GAAGd,SAAS,EAAzB;AAEA,MAAI;AAAEe,IAAAA;AAAF,MAASrB,SAAS,EAAtB;AAEA,QAAM,CAACsB,IAAD,EAAQC,OAAR,IAAmBxB,QAAQ,CAAC,EAAD,CAAjC;AAEA,QAAM,CAACyB,QAAD,EAAYC,WAAZ,IAA2B1B,QAAQ,CAAC,EAAD,CAAzC;AAGAD,EAAAA,SAAS,CACL,MAAM;AACJ,UAAM4B,iBAAiB,GAAG,YAAY;AACpC,UAAIC,QAAQ,GAAI,MAAMtB,aAAa,EAAnC;AACA,UAAIuB,IAAI,GAAQC,YAAhB;AACA,UAAIC,SAAS,GAAGH,QAAQ,CAACI,MAAT,CAAgB,CAACT,IAAD,EAAMU,KAAN,KAAgB;AAC1C,eAAOV,IAAI,CAACW,MAAL,KAAgBL,IAAI,CAACP,EAA5B;AACD,OAFW,CAAhB;AAGAa,MAAAA,QAAQ,CAACJ,SAAD,CAAR;AACD,KAPD;;AASAK,IAAAA,YAAY,GAVR,CAYF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGAC,IAAAA,KAAK,CAAC,+CAAD,CAAL,CACCC,IADD,CACQC,QAAD,IAAc;AACjB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KAHH,EAIGF,IAJH,CAISG,IAAD,IAAQ;AACV,UAAIhB,QAAQ,GAAGgB,IAAI,CAACT,MAAL,CAAY,CAACU,GAAD,EAAKT,KAAL,KAAe;AACtC,eAAOS,GAAG,CAACC,MAAJ,KAAe,CAACrB,EAAvB;AACH,OAFc,CAAf;AAGAI,MAAAA,WAAW,CAACD,QAAD,CAAX;AACL,KATD;AAUH,GAnCI,EAoCP,EApCO,CAAT;AAyCF,sBACE,QAAC,SAAD;AAAW,IAAA,QAAQ,EAAC,IAApB;AAAyB,IAAA,SAAS,EAAEJ,OAAO,CAACZ,mBAA5C;AAAA,2BACI,QAAC,QAAD;AAAwB,MAAA,IAAI,EAAEc,IAA9B;AAAA,gBACCE,QAAQ,CAACmB,GAAT,CAAa,CAACC,OAAD,EAASZ,KAAT,KAAmB;AAC7B,4BACI;AAAA,kCACA,QAAC,WAAD;AAA8B,YAAA,OAAO,EAAEY;AAAvC,aAAkBA,OAAO,CAACvB,EAA1B;AAAA;AAAA;AAAA;AAAA,kBADA,eAEA;AAAA;AAAA;AAAA;AAAA,kBAFA;AAAA,wBADJ;AAMH,OAPA;AADD,OAAeC,IAAI,CAACD,EAApB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAnEM;;GAAMH,W;UAEOZ,S,EAEHN,S;;;KAJJkB,W","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom';\nimport PostCard from './PostCard';\nimport { PostComment } from './PostComment';\nimport Container from \"@material-ui/core/Container\";\nimport { makeStyles } from '@material-ui/core';\nimport {fetchAllPosts} from './services/PostService'\n\n\nconst useStyles = makeStyles((theme)=>({\n    post_list_container : {\n        backgroundColor: \"#626477\",\n        paddingTop: \"60px\",\n        paddingBottom: \"30px\",\n        minHeight: \"calc(100vh - 65px)\",\n        display : \"flex\",\n        justifyContent : \"center\"\n      },\n      [theme.breakpoints.down(\"md\")] : {\n        post_list_container : {\n          padding : \"20px 10px 10px 10px\"\n        }\n      }\n})) \n\nexport const PostDetails = (props) => {\n\n    const classes = useStyles();\n\n    let { id } = useParams(); \n\n    const [post , setPost] = useState({})\n\n    const [comments , setComments] = useState([]);\n\n\n    useEffect(\n        () => {\n          const fetchPostComments = async () => {\n            let allPosts  = await fetchAllPosts();\n            let user      = userLoggedIn;\n            let userPosts = allPosts.filter((post,index) => {\n                  return post.userId === user.id\n                })\n            setPosts(userPosts);\n          }\n      \n          fetchMyposts();\n\n            // fetch(\"https://jsonplaceholder.typicode.com/posts\")\n            // .then( (response) => {\n            //     return response.json()\n            //   })\n            //   .then((data)=>{\n            //    let post2 = data.filter((ele,index) => {\n            //           return ele.id === +id\n            //       })[0]\n            //       setPost(post2);\n            // })\n\n\n            fetch(\"https://jsonplaceholder.typicode.com/comments\")\n            .then( (response) => {\n                return response.json()\n              })\n              .then((data)=>{\n                  let comments = data.filter((ele,index) => {\n                      return ele.postId === +id\n                  })\n                  setComments(comments);\n            })\n        }\n    , [])\n\n    \n\n\n  return (\n    <Container maxWidth=\"xl\" className={classes.post_list_container}>\n        <PostCard key={post.id} post={post}>\n        {comments.map((comment,index) => {\n            return(\n                <>\n                <PostComment key={comment.id} comment={comment} />\n                <hr />\n                </>\n            )\n        })}\n        </PostCard>\n    </Container>\n\n  )\n}\n"]},"metadata":{},"sourceType":"module"}